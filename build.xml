<?xml version="1.0" encoding="UTF-8"?>
<project default="all" name="jinks">
    <xmlproperty file="expath-pkg.xml" />
    <property name="project.version" value="${package(version)}" />
    <property name="project.app" value="${package(abbrev)}" />
    <property name="build.dir" value="build" />
    <property name="app.build.dir" value="${build.dir}/${project.app}-${project.version}" />
    <property name="git.repo.path" value="${basedir}/.git" />
    <available file="${git.repo.path}" type="dir" property="git.present" />

    <!-- Adjust path below to match location of your npm binary -->
    <property name="npm" value="npm" />

    <!-- no clean -->
    <target name="all" depends="xar" />

    <target name="rebuild" depends="clean,all" />

    <target name="clean">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.dir}" includes="**/*" />
        </delete>
    </target>

    <target name="prepare">
        <mkdir dir="${app.build.dir}" />
        <copy todir="${app.build.dir}">
            <fileset dir="${basedir}">
                <exclude name="${build.dir}/**" />
                <exclude name=".github/**" />
                <exclude name=".vscode/**" />
                <exclude name=".idea/**" />
                <exclude name=".devcontainer" />
                <exclude name="node_modules/**" />
                <exclude name=".gitignore" />
                <exclude name=".dockerignore" />
                <exclude name="test/cypress/screenshots/**" />
                <exclude name="test/cypress/downloads/**" />
                <exclude name="test/cypress/videos/**" />
                <exclude name=".*" />
                <exclude name="repo.xml.tmpl" />
                <exclude name="local.node-exist.json" />
            </fileset>
        </copy>
        <copy todir="${app.build.dir}" overwrite="true" verbose="true">
            <fileset dir="${basedir}">
                <include name="*.tmpl" />
                <include name="pages/page.html.tmpl" />
            </fileset>
            <filterchain>
                <replacetokens>
                    <token key="name" value="${app.name}" />
                    <token key="version" value="${app.version}" />
                    <token key="url" value="${app.url}" />
                    <token key="title" value="${app.title}" />
                    <token key="commit-id" value="${commit-id}" />
                    <token key="commit-time" value="${commit-time}" />
                    <token key="scripts-cdn" value="${scripts-cdn}" />
                </replacetokens>
                <tokenfilter>
                    <!-- until we move template processing to XSLT, take care with special
                    characters -->
                    <replacestring from="&amp;" to="&amp;amp;" />
                </tokenfilter>
            </filterchain>
            <globmapper from="*.tmpl" to="*" />
        </copy>
    </target>

    <target name="xar" depends="git.revision">
        <property name="scripts-cdn" value="external" />
        <antcall target="prepare"></antcall>
        <zip basedir="${app.build.dir}"
            destfile="${build.dir}/${project.app}-${project.version}.xar" />
    </target>

    <target name="xar-local" depends="clean,git.revision,npm.install">
        <property name="scripts-cdn" value="local" />
        <antcall target="prepare"></antcall>
        <copy todir="${app.build.dir}/resources/styles"
            file="node_modules/@picocss/pico/css/pico.min.css" />
        <copy todir="${app.build.dir}/resources/images">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/images">
                <include name="leaflet/*" />
                <include name="openseadragon/*" />
            </fileset>
        </copy>
        <copy todir="${app.build.dir}/resources/css">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/css" />
        </copy>
        <copy todir="${app.build.dir}/resources/lib">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/lib" />
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/dist">
                <include name="*.js" />
                <include name="*.map" />
            </fileset>
        </copy>
        <copy todir="${app.build.dir}/resources/i18n/common">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/i18n/common" />
        </copy>
        <antcall target="xar" />
    </target>

    <target name="git.revision" description="Store git revision in ${commit-id}" if="git.present">
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false"
            errorproperty="">
            <arg value="--git-dir=${git.repo.path}" />
            <arg value="rev-parse" />
            <arg value="HEAD" />
        </exec>
        <condition property="commit-id" value="${git.revision}" else="">
            <and>
                <isset property="git.revision" />
                <length string="${git.revision}" trim="yes" length="0" when="greater" />
            </and>
        </condition>
        <echo>git commit id: ${commit-id}</echo>
        <exec executable="git" outputproperty="git.time" failifexecutionfails="false"
            errorproperty="">
            <arg value="--git-dir=${git.repo.path}" />
            <arg value="show" />
            <arg value="-s" />
            <arg value="--format=%ct" />
            <arg value="${git.revision}" />
        </exec>

        <condition property="commit-time" value="${git.time}" else="">
            <and>
                <isset property="git.time" />
                <length string="${git.time}" trim="yes" length="0" when="greater" />
            </and>
        </condition>
        <echo>git commit time: ${commit-time}</echo>
    </target>

    <target name="npm.install">
        <exec executable="${npm}" outputproperty="npm.output">
            <arg line="install" />
        </exec>
        <echo message="${npm.output}" />
    </target>
</project>