<?xml version="1.0" encoding="UTF-8"?>
<project default="xar" name="jinks">
    <xmlproperty file="expath-pkg.xml" />
    <property file="local.build.properties" />
    <property name="project.version" value="${package(version)}" />
    <property name="project.app" value="${package(abbrev)}" />
    <property name="build.dir" value="build" />
    <property name="vendor.dir" value="${basedir}/resources/lib" />
    <property name="git.repo.path" value="${basedir}/.git" />
    <available file="${git.repo.path}" type="dir" property="git.present" />

    <!-- Use local.build.properties file to set location of your npm binary -->
    <property name="npm" value="npm" />

    <!-- Only calculate git for releases -->
    <condition property="is-release">
        <equals arg1="${release}" arg2="true" />
    </condition>

    <target name="release.true" if="is-release">
        <echo>Calculating git revision info for release</echo>
    </target>

    <target name="release.false" unless="is-release">
        <echo>Not a release, moving on ...</echo>
    </target>

    <target name="check-release" depends="release.true, release.false">
    </target>

    <target name="clean">
        <echo message="Cleaning build artefacts..." />
        <delete dir="${build.dir}" failonerror="false" />
        <delete dir="${vendor.dir}" failonerror="false" />
        <delete dir="${basedir}/resources/css" failonerror="false" />
        <delete dir="${basedir}/resources/i18n/common" failonerror="false" />
        <delete dir="${basedir}/resources/images/leaflet" failonerror="false" />
        <delete dir="${basedir}/resources/images/openseadragon" failonerror="false" />
    </target>

    <target name="npm.install">
        <exec executable="${npm}" outputproperty="npm.output">
            <arg line="install" />
        </exec>
        <echo message="${npm.output}" />
    </target>

    <target name="npm.build">
        <exec executable="${npm}" outputproperty="npm.build.output">
            <arg line="run build" />
        </exec>
        <echo message="${npm.build.output}" />
    </target>

    <!-- TBD(DP): make conditional on release -->
    <target name="templates" description="process template files" depends="git.revision">
        <echo message="Apply values to .tmpl ..." />
        <copy todir="${basedir}" overwrite="true" verbose="true">
            <fileset file="*.xml.tmpl" />
            <filterchain>
                <replacetokens>
                    <token key="name" value="${app.name}" />
                    <token key="version" value="${app.version}" />
                    <token key="url" value="${app.url}" />
                    <token key="title" value="${app.title}" />
                    <token key="commit-id" value="${git.revision}" />
                    <token key="commit-time" value="${git.time}" />
                </replacetokens>
                <tokenfilter>
                    <!-- until we move template processing to XSLT, take care with reserved
                    characters -->
                    <replacestring from="&amp;" to="&amp;amp;" />
                </tokenfilter>
            </filterchain>
            <globmapper from="*.tmpl" to="*" />
        </copy>
    </target>

    <target name="git.revision" description="Store git revision in ${commit-id}" if="git.present">
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false"
            errorproperty="">
            <arg value="--git-dir=${git.repo.path}" />
            <arg value="rev-parse" />
            <arg value="HEAD" />
        </exec>
        <condition property="commit-id" value="${git.revision}" else="">
            <and>
                <isset property="git.revision" />
                <length string="${git.revision}" trim="yes" length="0" when="greater" />
            </and>
        </condition>
        <echo>git commit id: ${commit-id}</echo>
        <exec executable="git" outputproperty="git.time" failifexecutionfails="false"
            errorproperty="">
            <arg value="--git-dir=${git.repo.path}" />
            <arg value="show" />
            <arg value="-s" />
            <arg value="--format=%ct" />
            <arg value="${git.revision}" />
        </exec>

        <condition property="commit-time" value="${git.time}" else="">
            <and>
                <isset property="git.time" />
                <length string="${git.time}" trim="yes" length="0" when="greater" />
            </and>
        </condition>
        <echo>git commit time: ${commit-time}</echo>
    </target>

    <target name="vendor" depends="clean,npm.install,npm.build">
        <copy todir="${basedir}/resources/css">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/css" />
        </copy>
        <copy todir="${vendor.dir}">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/lib" />
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/dist">
                <include name="*.js" />
                <include name="*.map" />
            </fileset>
        </copy>
        <copy todir="${basedir}/resources/i18n/common">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/i18n/common" />
        </copy>
        <copy todir="${basedir}/resources/images">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/images">
                <include name="leaflet/*" />
                <include name="openseadragon/*" />
            </fileset>
        </copy>
    </target>

    <target name="xar" depends="clean,check-release,git.revision,templates,vendor">
        <echo message="Creating xar file..." />
        <zip basedir="${basedir}"
            destfile="${build.dir}/${project.app}.xar">
            <exclude name="${build.dir}/**" />
            <exclude name=".github/**" />
            <exclude name=".vscode/**" />
            <exclude name=".idea/**" />
            <exclude name=".devcontainer/**" />
            <exclude name="node_modules/**" />
            <exclude name=".gitignore" />
            <exclude name=".dockerignore" />
            <exclude name="test/cypress/screenshots/**" />
            <exclude name="test/cypress/downloads/**" />
            <exclude name="test/cypress/videos/**" />
            <exclude name=".*" />
            <exclude name="repo.xml.tmpl" />
            <exclude name="local.node-exist.json" />
        </zip>
    </target>
</project>