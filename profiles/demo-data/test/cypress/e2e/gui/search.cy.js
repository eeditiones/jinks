// StandardJS, should-style assertions
// GUI tests for Search functionality
// Generated by jinks - DO NOT EDIT manually

describe('TEI-Publisher Search', () => {
  beforeEach(() => {
    // Universal intercepts (loginStub, timelineStub) are automatically set up in support/e2e.js
    // Setup search-specific intercepts
    cy.setupSearchIntercepts()
    
    cy.visit('/browse.html?collection=demo')
    
    // Wait for page to stabilize
    cy.get('body').should('be.visible')
    cy.get('pb-paginate', { timeout: 10000 }).should('exist')
  })

  describe('Search Input', () => {
    it('displays search input field', () => {
      cy.get('input[type="text"][name="query"], input[type="search"], pb-search input')
        .should('exist')
        .should('be.visible')
    })

    it('accepts text input', () => {
      cy.get('input[type="text"][name="query"], input[type="search"], pb-search input')
        .first()
        .type('test query')
        .should('have.value', 'test query')
    })

    it('performs search on enter key', () => {
      // Get initial total
      cy.get('pb-paginate')
        .invoke('attr', 'total')
        .as('initialTotal')
      
      // Perform search
      cy.get('input[type="text"][name="query"], input[type="search"], pb-search input')
        .first()
        .type('kant{enter}')
      
      // Wait for search API call to complete
      cy.wait('@searchApi', { timeout: 10000 })
      
      // Wait for pagination to update with new results
      cy.get('pb-paginate', { timeout: 10000 })
        .should('exist')
        .invoke('attr', 'total')
        .should('not.be.empty')
    })
  })

  describe('Search Results', () => {
    it('displays search results after query', () => {
      cy.get('input[type="text"][name="query"], input[type="search"], pb-search input')
        .first()
        .type('kant{enter}')
      
      // Wait for search API call to complete
      cy.wait('@searchApi', { timeout: 10000 })
      
      // Wait for results to be displayed in the DOM
      cy.get('main', { timeout: 10000 })
        .should('be.visible')
      
      // Wait for actual result elements to appear or for pagination to show results
      cy.get('pb-paginate', { timeout: 10000 })
        .should('exist')
        .invoke('attr', 'total')
        .then((total) => {
          const totalNum = parseInt(total, 10)
          if (totalNum > 0) {
            // Results exist, wait for them to render
            cy.get('main')
              .find('.tei-fileDesc3, .collection-item, [class*="document"], [class*="result"]')
              .should('have.length.at.least', 1)
              .first()
              .should('be.visible')
          } else {
            // No results, but page should still update
            cy.get('body').should('be.visible')
          }
        })
    })

    it('updates pagination count after search', () => {
      // Get initial total
      cy.get('pb-paginate')
        .invoke('attr', 'total')
        .as('initialTotal')
      
      // Perform search that should find results
      cy.get('input[type="text"][name="query"], input[type="search"], pb-search input')
        .first()
        .type('kant{enter}')
      
      // Wait for search API call
      cy.wait('@searchApi', { timeout: 10000 })
      
      // Wait for pagination to update - verify total attribute changes or remains valid
      cy.get('pb-paginate', { timeout: 10000 })
        .should('have.attr', 'total')
        .invoke('attr', 'total')
        .should('not.be.empty')
        .then((newTotal) => {
          cy.get('@initialTotal').then((initialTotal) => {
            // Total may change (same or different), but should be valid
            expect(parseInt(newTotal, 10)).to.be.at.least(0)
            expect(parseInt(initialTotal, 10)).to.be.at.least(0)
          })
        })
    })

    it('handles empty search results gracefully', () => {
      // Search for something unlikely to exist
      cy.get('input[type="text"][name="query"], input[type="search"], pb-search input')
        .first()
        .type('nonexistentxyzabc123{enter}')
      
      // Wait for search API call to complete
      cy.wait('@searchApi', { timeout: 10000 })
      
      // Should still display pagination (may show 0 results)
      cy.get('pb-paginate', { timeout: 10000 })
        .should('exist')
        .invoke('attr', 'total')
        .should('not.be.empty')
        .then((total) => {
          // Empty results is valid
          expect(parseInt(total, 10)).to.be.at.least(0)
        })
    })
  })

  describe('Search Facets', () => {
    it('displays facet sections', () => {
      // Facets may be in sidebar or aside
      cy.get('body').then(($body) => {
        const hasFacets = $body.find('aside, [class*="facet"], [class*="filter"]').length > 0
        // Facets are optional, so we just check if page loaded
        expect($body.length).to.be.greaterThan(0)
      })
    })

    it('applies facet filters when available', () => {
      // Check if facets exist
      cy.get('body').then(($body) => {
        const facetInputs = $body.find('[data-dimension*="facet"], [class*="facet"] input, aside input[type="checkbox"]')
        
        if (facetInputs.length > 0) {
          // Get initial total
          cy.get('pb-paginate')
            .invoke('attr', 'total')
            .as('initialTotal')
          
          // Click first available facet
          cy.wrap(facetInputs.first())
            .click({ force: true })
          
          // Wait for search/facets API calls triggered by facet change
          cy.wait(['@searchApi', '@facetsApi'], { timeout: 10000 })
          
          // Wait for pagination to update
          cy.get('pb-paginate', { timeout: 10000 })
            .should('have.attr', 'total')
            .invoke('attr', 'total')
            .should('not.be.empty')
        } else {
          cy.log('No facets available to test')
        }
      })
    })
  })

  describe('Search Clearing', () => {
    it('clears search query', () => {
      cy.get('input[type="text"][name="query"], input[type="search"], pb-search input')
        .first()
        .type('test query')
        .clear()
        .should('have.value', '')
    })

    it('restores original results after clearing search', () => {
      // Get initial total
      cy.get('pb-paginate')
        .invoke('attr', 'total')
        .as('initialTotal')
      
      // Perform search
      cy.get('input[type="text"][name="query"], input[type="search"], pb-search input')
        .first()
        .type('kant{enter}')
      
      // Wait for search API call
      cy.wait('@searchApi', { timeout: 10000 })
      
      // Clear search (empty query)
      cy.get('input[type="text"][name="query"], input[type="search"], pb-search input')
        .first()
        .clear()
        .type('{enter}')
      
      // Wait for search API call with empty query (resets results)
      cy.wait('@searchApi', { timeout: 10000 })
      
      // Results should reset (may not be exact due to caching, but should be valid)
      cy.get('pb-paginate', { timeout: 10000 })
        .should('have.attr', 'total')
        .invoke('attr', 'total')
        .should('not.be.empty')
    })
  })
})

