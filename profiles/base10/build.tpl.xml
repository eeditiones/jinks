<?xml version="1.0" encoding="UTF-8"?>
<project default="all" name="[[ $label ]]">
    <xmlproperty file="expath-pkg.xml"/>
    <property name="project.version" value="${package(version)}"/>
    <property name="project.app" value="${package(abbrev)}"/>
    <property name="build.dir" value="build"/>
    <property name="app.build.dir" value="${build.dir}/${project.app}-${project.version}"/>
    <property name="git.repo.path" value="${basedir}/.git"/>
    <property name="scripts.dir" value="${basedir}/node_modules/@teipublisher/pb-components/dist" />
    <available file="${git.repo.path}" type="dir" property="git.present"/>

    <!-- Adjust path below to match location of your npm binary -->
    <property name="npm" value="npm"/>

    <!-- Only calculate git for releases -->
    <condition property="is-release">
        <equals arg1="${release}" arg2="true" />
    </condition>

    <target name="release.true" if="is-release">
        <echo>Calculating git revision info for release</echo>
    </target>

    <target name="release.false" unless="is-release">
        <echo>Not a release, moving on ...</echo>
    </target>

    <target name="check-release" depends="release.true, release.false">
    </target>


    <target name="all" depends="clean,npm.install,prepare,xar" description="main target, create xar file in build folder"/>

    <target name="clean">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.dir}" includes="**/*" />
        </delete>
    </target>

    <target name="prepare" depends="git.revision" description="create build dir, assembly and filter resources">
        <mkdir dir="${app.build.dir}"/>
        <copy todir="${app.build.dir}">
            <fileset dir="${basedir}">
                <include name="**/*"/>
                <exclude name="${build.dir}/**"/>
                <exclude name="*.code-workspace" />
                <exclude name=".devcontainer/**" />
                <exclude name="**/.git/**"/>
                <exclude name=".github/**" />
                <exclude name="**/.idea/**"/>
                <exclude name=".vscode/**" />
                <exclude name="*.tmpl" />
                <exclude name="*.properties" />
                <exclude name="build.xml"/>
                <exclude name="README.md"/>
                <exclude name="node_modules/**"/>
                <exclude name="package*.json"/>
                <exclude name=".existdb.json"/>
                <exclude name="gulpfile.js"/>
                <exclude name=".devcontainer"/>
                <exclude name="test/cypress/screenshots/**" />
                <exclude name="test/cypress/videos/**" />
            </fileset>
        </copy>
        <copy todir="${app.build.dir}" overwrite="true" verbose="true">
            <fileset file="*.xml.tmpl" />
            <filterchain>
                <replacetokens>
                    <token key="name" value="${app.name}" />
                    <token key="version" value="${app.version}" />
                    <token key="url" value="${app.url}" />
                    <token key="title" value="${app.title}" />
                    <token key="commit-id" value="${commit-id}" />
                    <token key="commit-time" value="${commit-time}" />
                </replacetokens>
                <tokenfilter>
                    <!-- until we move template processing to XSLT, take care with special
                    characters -->
                    <replacestring from="&amp;" to="&amp;amp;" />
                </tokenfilter>
            </filterchain>
            <globmapper from="*.tmpl" to="*" />
        </copy>
    </target>

    <target name="xar" depends="git.revision,prepare" description="create XAR file of folder ${app.build.dir}">
        <zip basedir="${app.build.dir}" destfile="${build.dir}/${project.app}-${project.version}.xar"/>
    </target>

    <target name="xar-local" depends="clean,git.revision,npm.install,prepare" description="run 'npm install' and run 'build' target">
        <copy todir="${app.build.dir}/resources/styles" file="node_modules/@picocss/pico/css/pico.min.css"/>
        <copy todir="${app.build.dir}/resources/images">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/images">
                <include name="leaflet/*"/>
                <include name="openseadragon/*"/>
            </fileset>
        </copy>
        <copy todir="${app.build.dir}/resources/scripts">
            <fileset dir="${scripts.dir}">
                <include name="*.js" />
                <include name="*.map" />
            </fileset>
        </copy>
        <copy todir="${app.build.dir}/resources/css">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/css" />
            <fileset dir="${basedir}/node_modules/@jinntec/fore/resources">
                <include name="*.css"/>
            </fileset>
        </copy>
        <copy todir="${app.build.dir}/resources/lib">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/lib" />
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/dist">
                <include name="*.js" />
                <include name="*.map" />
            </fileset>
            <fileset dir="${basedir}/node_modules/@jinntec/fore/dist">
                <include name="*.js" />
                <include name="*.map" />
            </fileset>
        </copy>
        <copy todir="${app.build.dir}/resources/i18n/common">
            <fileset dir="${basedir}/node_modules/@teipublisher/pb-components/i18n/common" />
        </copy>
        <antcall target="xar" />
    </target>

    <target name="git.revision" description="Store git revision in ${commit-id}" if="is-release" depends="check-release">
        <exec executable="git" outputproperty="git.revision" failifexecutionfails="false" errorproperty="">
            <arg value="--git-dir=${git.repo.path}"/>
            <arg value="rev-parse"/>
            <arg value="HEAD"/>
        </exec>
        <condition property="commit-id" value="${git.revision}" else="">
            <and>
                <isset property="git.revision"/>
                <length string="${git.revision}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>
        <echo>git commit id: ${commit-id}</echo>
        <exec executable="git" outputproperty="git.time" failifexecutionfails="false" errorproperty="">
            <arg value="--git-dir=${git.repo.path}"/>
            <arg value="show"/>
            <arg value="-s"/>
            <arg value="--format=%ct"/>
            <arg value="${git.revision}"/>
        </exec>

        <condition property="commit-time" value="${git.time}" else="">
            <and>
                <isset property="git.time"/>
                <length string="${git.time}" trim="yes" length="0" when="greater"/>
            </and>
        </condition>
        <echo>git commit time: ${commit-time}</echo>
    </target>

    <target name="npm.install">
        <exec executable="${npm}" outputproperty="npm.output">
            <arg line="install"/>
        </exec>
        <echo message="${npm.output}"/>
    </target>
</project>
