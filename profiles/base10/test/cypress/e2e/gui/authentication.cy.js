// StandardJS, should-style assertions
// GUI tests for Authentication UI functionality
// Generated by jinks - DO NOT EDIT manually

describe('TEI-Publisher Authentication UI', () => {
  beforeEach(() => {    
    // Intercept and stub problematic API calls that cause hanging
    cy.intercept('POST', '/api/login/**', { statusCode: 401, body: { error: 'Unauthorized' } }).as('loginStub')
    cy.intercept('GET', '/api/timeline/**', { statusCode: 200, body: { timeline: [] } }).as('timelineStub')
    
    cy.visit('/browse-custom.html')
    
    // Wait for page to stabilize
    cy.get('body').should('be.visible')
  })

  describe('Login UI Elements', () => {
    it('displays login prompt with credentials', () => {
      cy.contains('Log in as').should('be.visible')
      cy.contains('"tei"').should('be.visible')
      cy.contains('"simple"').should('be.visible')
    })

    it('shows login link', () => {
      cy.get('body').then(($body) => {
        if ($body.text().includes('login.login')) {
          cy.contains('login.login').should('be.visible')
        }
      })
    })

    it('displays login context information', () => {
      cy.contains('to experiment with your own files and ODDs').should('be.visible')
    })

    it('shows login instructions clearly', () => {
      // Check that login instructions are visible and clear
      cy.contains('Log in as').should('be.visible')
      cy.contains('with password').should('be.visible')
    })
  })

  describe('Restricted Content UI', () => {
    it('shows restricted content structure', () => {
      // Check that pb-restricted elements exist (they may not be visible without login)
      cy.get('pb-restricted').should('exist')
      
      // Check that restricted content has proper structure
      cy.get('pb-restricted').then(($elements) => {
        if ($elements.length > 0) {
          // pb-restricted elements should exist but may not be visible without authentication
          cy.get('pb-restricted').should('not.have.attr', 'show')
        }
      })
    })

    it('displays fallback content when not authenticated', () => {
      // Check for fallback content in restricted sections
      cy.get('pb-restricted').then(($elements) => {
        if ($elements.length > 0) {
          // Should show fallback content or be hidden
          cy.get('pb-restricted').should('not.have.attr', 'show')
        }
      })
    })

    it('has proper restricted content styling', () => {
      // Check that restricted content has appropriate CSS classes
      cy.get('pb-restricted').then(($elements) => {
        if ($elements.length > 0) {
          // Should have proper styling for restricted state
          cy.get('pb-restricted').should('exist')
        }
      })
    })
  })

  describe('Authentication UI Responsiveness', () => {
    it('adapts login UI to mobile viewport', () => {
      cy.viewport(375, 667) // iPhone SE
      
      // Login prompt should still be visible on mobile
      cy.contains('Log in as').should('be.visible')
      cy.contains('"tei"').should('be.visible')
      cy.contains('"simple"').should('be.visible')
    })

    it('adapts login UI to tablet viewport', () => {
      cy.viewport(768, 1024) // iPad
      
      // Login prompt should be visible on tablet
      cy.contains('Log in as').should('be.visible')
      cy.contains('"tei"').should('be.visible')
      cy.contains('"simple"').should('be.visible')
    })
  })

  describe('Authentication UI Accessibility', () => {
    it('has accessible login instructions', () => {
      // Check that login instructions are accessible
      cy.contains('Log in as').should('be.visible')
      cy.contains('"tei"').should('be.visible')
      cy.contains('"simple"').should('be.visible')
      
      // Check for proper heading structure
      cy.get('h1, h2, h3, h4, h5, h6').should('have.length.at.least', 1)
    })

    it('provides clear authentication context', () => {
      // Check that authentication context is clear and accessible
      cy.contains('to experiment with your own files and ODDs').should('be.visible')
      
      // Should provide clear instructions
      cy.contains('Log in as').should('be.visible')
      cy.contains('with password').should('be.visible')
    })
  })
})

