// StandardJS, should-style assertions
// GUI tests for Landing Page functionality
// Generated by jinks - DO NOT EDIT manually

describe('TEI-Publisher Landing Page', () => {
  beforeEach(() => {
    // Universal intercepts (loginStub, timelineStub) are automatically set up in support/e2e.js
    // Visit landing page (index.html)
    cy.visit('/index.html')
    
    // Wait for page to stabilize
    cy.get('body').should('be.visible')
  })

  describe('Landing Page Structure', () => {
    it('loads the landing page successfully', () => {
      cy.url().should('match', /\/index\.html$|\/$/)
      cy.get('body').should('be.visible')
    })

    it('displays page title', () => {
      cy.title().should('not.be.empty')
    })

    it('shows main content area', () => {
      cy.get('main, body').should('be.visible')
    })

    it('has landing page layout class', () => {
      // Landing page uses special layout class
      cy.get('body').then(($body) => {
        const hasLandingLayout = $body.hasClass('landing-layout') ||
                                 $body.find('[class*="landing"]').length > 0 ||
                                 $body.length > 0
        
        expect(hasLandingLayout).to.be.true
      })
    })
  })

  describe('Hero Section', () => {
    it('displays hero section', () => {
      // Hero section is in the 'hero' template slot
      cy.get('header.hero, .hero, [class*="hero"]')
        .should('exist')
        .should('be.visible')
    })

    it('shows hero heading', () => {
      cy.get('header.hero h1, .hero h1, [class*="hero"] h1')
        .should('exist')
        .should('be.visible')
        .invoke('text')
        .should('not.be.empty')
    })

    it('displays explore link', () => {
      // Hero section should have explore/browse link
      cy.get('header.hero .explore-link, .hero a[href*="browse"], a.explore-link')
        .should('exist')
    })

    it('explore link navigates to browse page', () => {
      cy.get('a.explore-link, .hero a[href*="browse"]')
        .first()
        .should('have.attr', 'href')
        .and('include', 'browse')
    })
  })

  describe('Landing Page Sections', () => {
    it('displays about section when present', () => {
      // Landing page may include about section
      cy.get('body').then(($body) => {
        const hasAboutSection = $body.find('[class*="about"], section[class*="about"]').length > 0
        
        if (hasAboutSection) {
          cy.get('[class*="about"], section[class*="about"]')
            .should('be.visible')
        } else {
          cy.log('About section not present (may be optional)')
        }
      })
    })

    it('displays highlights section when present', () => {
      // Landing page may include highlights section
      cy.get('body').then(($body) => {
        const hasHighlights = $body.find('[class*="highlight"], section[class*="highlight"]').length > 0
        
        if (hasHighlights) {
          cy.get('[class*="highlight"], section[class*="highlight"]')
            .should('be.visible')
        } else {
          cy.log('Highlights section not present (may be optional)')
        }
      })
    })

    it('displays feature image when present', () => {
      // Landing page may have feature images
      cy.get('body').then(($body) => {
        const images = $body.find('img')
        
        if (images.length > 0) {
          cy.get('img')
            .first()
            .should('be.visible')
            .should('have.attr', 'src')
        } else {
          cy.log('Feature images not present (may be optional)')
        }
      })
    })
  })

  describe('Navigation Elements', () => {
    it('displays app header/navigation', () => {
      // Landing page should have navigation
      cy.get('app-header, nav, header, [role="banner"]')
        .should('exist')
    })

    it('shows footer when present', () => {
      cy.get('body').then(($body) => {
        const hasFooter = $body.find('footer, [role="contentinfo"]').length > 0
        
        if (hasFooter) {
          cy.get('footer, [role="contentinfo"]')
            .should('exist')
        } else {
          cy.log('Footer not present (may be optional)')
        }
      })
    })
  })

  describe('Landing Page Features', () => {
    it('has toolbar disabled when configured', () => {
      // Landing page typically disables toolbar
      cy.get('body').then(($body) => {
        // Toolbar may not be visible on landing page
        const hasToolbar = $body.find('[class*="toolbar"]').length > 0
        
        // This is fine - toolbar is typically disabled on landing page
        expect($body.length).to.be.greaterThan(0)
      })
    })

    it('displays main content', () => {
      // Landing page should have some content
      cy.get('main, body')
        .should('not.be.empty')
        .invoke('text')
        .should('not.be.empty')
    })
  })
})

