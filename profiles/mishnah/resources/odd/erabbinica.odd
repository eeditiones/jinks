<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:pb="http://teipublisher.com/1.0" xml:lang="en">
    <teiHeader>
        <fileDesc>
            <titleStmt>
                <title>Digital Mishnah</title>
                <title type="short">Mishnah Diplomatic</title>
            </titleStmt>
            <publicationStmt>
                <publisher>TEI Consortium</publisher>
                <availability>
                    <licence target="http://creativecommons.org/licenses/by-sa/3.0/"> Distributed
                        under a Creative Commons Attribution-ShareAlike 3.0 Unported License </licence>
                    <licence target="http://www.opensource.org/licenses/BSD-2-Clause">
                        <p>Copyright 2014 TEI Consortium.</p>
                        <p>All rights reserved. </p>
                        <p>Redistribution and use in source and binary forms, with or without
                            modification, are permitted provided that the following conditions are
                            met:</p>
                        <list>
                            <item>Redistributions of source code must retain the above copyright
                                notice, this list of conditions and the following disclaimer.</item>
                            <item>Redistributions in binary form must reproduce the above copyright
                                notice, this list of conditions and the following disclaimer in the
                                documentation and/or other materials provided with the
                                distribution.</item>
                        </list>
                        <p>This software is provided by the copyright holders and contributors "as
                            is" and any express or implied warranties, including, but not limited
                            to, the implied warranties of merchantability and fitness for a
                            particular purpose are disclaimed. In no event shall the copyright
                            holder or contributors be liable for any direct, indirect, incidental,
                            special, exemplary, or consequential damages (including, but not limited
                            to, procurement of substitute goods or services; loss of use, data, or
                            profits; or business interruption) however caused and on any theory of
                            liability, whether in contract, strict liability, or tort (including
                            negligence or otherwise) arising in any way out of the use of this
                            software, even if advised of the possibility of such damage.</p>
                    </licence>
                    <p>TEI material can be licensed differently depending on the use you intend to
                        make of it. Hence it is made available under both the CC+BY and BSD-2
                        licences. The CC+BY licence is generally appropriate for usages which treat
                        TEI content as data or documentation. The BSD-2 licence is generally
                        appropriate for usage of TEI content in a software environment. For further
                        information or clarification, please contact the <ref target="mailto:info@tei-c.org">TEI Consortium</ref>. 
                    </p>
                </availability>
            </publicationStmt>
            <sourceDesc>
                <p>created ab initio during a meeting in Oxford</p>
            </sourceDesc>
        </fileDesc>
        <encodingDesc>
            <tagsDecl>
                <rendition source="mishnah.css"/>
            </tagsDecl>
        </encodingDesc>
    </teiHeader>
    <text>
        <body>
            <schemaSpec start="TEI teiCorpus" ident="mishnah" source="teipublisher.odd">
                <elementSpec ident="TEI" mode="change">
                    <model behaviour="document"/>
                </elementSpec>

                <elementSpec ident="pb" mode="change">
                    <model output="web" predicate="$parameters?layout eq 'synoptic'" behaviour="omit"/>
                    <model output="print" behaviour="omit"/>
                    <model predicate="$parameters?iiif-prefix" behaviour="inline" cssClass="facs pagebreak">
            <param name="facs" value="let $vat := if ($parameters?iiif-prefix = 'vatican') then 'MSS_Vat.ebr.299/' else '' return  $parameters?iiif || $vat ||substring-after(@facs, $parameters?iiif-prefix ||':')"/>
            <param name="foo" value="$parameters?iiif-prefix"/>
            <pb:template xmlns="" xml:space="preserve"><span><pb-facs-link facs="[[facs]]" emit="transcription"/></span></pb:template>
            <outputRendition xml:space="preserve">
            cursor: pointer;
color: #888888;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="cb" mode="change">
                    <model behaviour="webcomponent" cssClass="facs columnbreak">
            <param name="facs" value="let $pattern := '^'||$parameters?iiif-prefix || ':' || '([^/]+).*$'   let $vat := if ($parameters?iiif-prefix = 'vatican') then 'MSS_Vat.ebr.299/' else '' return  $parameters?iiif || $vat || replace(@facs, $pattern, '$1')"/>
            <param name="coordinates" value="let $pattern := '^'||$parameters?iiif-prefix || ':' || '[^/]+/(.*)$'   return  ('[', replace(@facs, $pattern, '$1'), ']')"/>
            <param name="content" value="concat('[', substring-after(@xml:id, '.'), ']')"/>
            <param name="name" value="'pb-facs-link'"/>
            <param name="emit" value="'transcription'"/>
            <outputRendition xml:space="preserve">
                            cursor: pointer;
                            display: table;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="delSpan" mode="add">
                    <model behaviour="inline">
            <param name="content" value="'['"/>
        </model>
                </elementSpec>
                <elementSpec ident="addSpan" mode="add">
                    <model behaviour="inline">
            <param name="content" value="'('"/>
        </model>
                </elementSpec>
                <elementSpec ident="anchor" mode="change">
                    <model predicate="@type='del'" behaviour="inline">
            <param name="content" value="']'"/>
        </model>
                    <model predicate="@type='add'" behaviour="inline">
            <param name="content" value="')'"/>
        </model>
                </elementSpec>

                <elementSpec ident="head" mode="change">
                    <model predicate="parent::lg" behaviour="block">
            <outputRendition xml:space="preserve">
            font-style: italic;
            </outputRendition>
        </model>
                    <model predicate="parent::list" behaviour="block">
            <outputRendition xml:space="preserve">
            font-weight: bold;
            </outputRendition>
        </model>
                    <model output="web" predicate="parent::div or parent::div1 or parent::div2 or parent::div3" behaviour="heading">
            <param name="level" value="max((count(ancestor::div | ancestor::div1), 1))"/>
            <param name="content" value="."/>
            <outputRendition xml:space="preserve">
            color:  #009900;
direction: rtl;
            </outputRendition>
        </model>
                    <model output="print" predicate="parent::div" behaviour="heading"/>
                    <model behaviour="block"/>
                </elementSpec>
                <elementSpec ident="ab" mode="change">
                    <modelSequence>
            <model behaviour="inline">
                <desc>versification: find tractate level, which is always two levels up from ab</desc>
                <param name="tractate" value="let $id := reverse(tokenize(@xml:id, '\.'))                    let $depth := count($id)                  let $ab := $id[1]                    let $tractate :=  switch ($depth)  case 6 return $id[3] case 5 return $id[3] default return ()                     let $verse := $id[1]                    let $chapter :=  switch ($depth)  case 6 return $id[2] case 5 return $id[2] default return ()                     let $order := switch ($depth)  case 6 return $id[4] default return ()                          let $composition :=   $id[$depth]                    let $cid :=   'ref.' || string-join(($composition, $order, $tractate),'.')                    let $can := if ($tractate) then collection('/db/apps/erabbinica-data/data/sources/ref')/id($cid)   else ()                  return      if ($tractate) then   ($can/head[1]/string(),  ' '||$chapter || ':' || $verse)  else ()"/>
                <param name="id" value="@xml:id"/>
                <pb:template xmlns="" xml:space="preserve"><span dir="ltr" id="[[id]]">[[tractate]]</span></pb:template>
            </model>
            <model predicate="$parameters?layout ne 'synoptic'" behaviour="alternate">
                <param name="default" value="count(preceding-sibling::ab)+1"/>
                <param name="alternate" value="@xml:id"/>
                <outputRendition xml:space="preserve">
                text-align: left;
                </outputRendition>
            </model>
            <model behaviour="paragraph" cssClass="aligned">
                <param name="align" value="replace(@xml:id, '^[^\.]+\.(.*)$', '$1')"/>
                <param name="id" value="@xml:id"/>
                <param name="header-footer" value="if (ends-with(@xml:id, ('.F', '.H'))) then 'h-f' else ''"/>
                <pb:template xmlns="" xml:space="preserve"><pb-highlight id="[[id]]" key="[[align]]" class="[[header-footer]]">[[content]]</pb-highlight>      </pb:template>
                <outputRendition xml:space="preserve">
                direction: rtl;
                </outputRendition>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="trailer" mode="change">
                    <model behaviour="block">
            <outputRendition xml:space="preserve">
                
                            opacity: 0.9;
                            color: #009900;
              
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="surplus" mode="add">
                    <model behaviour="inline">
            <outputRendition xml:space="preserve">         
                            opacity: 0.9;
                            color: #009900;
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="label" mode="change">
                    <model behaviour="inline" cssClass="internal-versification">
            <outputRendition xml:space="preserve">
            color: red;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="lb" mode="change">
                    <model predicate="$parameters?layout='synoptic'" behaviour="break">
            <param name="type" value="'line'"/>
            <param name="label" value="@n"/>
        </model>
                    <modelSequence>
            <model behaviour="break">
                <param name="type" value="'line'"/>
            </model>
            <model predicate="@facs" behaviour="webcomponent" cssClass="facs">
                <param name="facs" value="let $pattern := '^'||$parameters?iiif-prefix || ':' || '([^/]+).*$'   let $vat := if ($parameters?iiif-prefix = 'vatican') then 'MSS_Vat.ebr.299/' else '' return  $parameters?iiif || $vat || replace(@facs, $pattern, '$1')"/>
                <param name="coordinates" value="let $pattern := '^'||$parameters?iiif-prefix || ':' || '[^/]+/(.*)$'   return  ('[', replace(@facs, $pattern, '$1'), ']')"/>
                <param name="content" value="@n"/>
                <param name="name" value="'pb-facs-link'"/>
                <param name="emit" value="'transcription'"/>
                <outputRendition xml:space="preserve">
                font-size: 16px;
color: #888888;
cursor: pointer;
display: inline;
display: block;
margin-right: 1em;
margin-left: 1em;
float: right;
                </outputRendition>
            </model>
            <model predicate="not(@facs)" behaviour="inline">
                <param name="content" value="@n"/>
                <outputRendition xml:space="preserve">
                font-size: 16px;
color: #888888;
cursor: pointer;
display: block;
margin-right: 1em;
margin-left: 1em;
float: right;
                </outputRendition>
            </model>
        </modelSequence>
                </elementSpec>
                <elementSpec ident="choice" mode="change">
                    <model predicate="$parameters?mode='dipl' and sic and corr" behaviour="alternate">
            <param name="default" value="sic[1]"/>
            <param name="alternate" value="corr[1]"/>
        </model>
                    <model predicate="sic and corr" behaviour="alternate">
            <param name="default" value="corr[1]"/>
            <param name="alternate" value="sic[1]"/>
        </model>
                    <model predicate="$parameters?mode='dipl' and abbr and expan" behaviour="alternate" cssClass="toggle">
            <param name="default" value="abbr[1]"/>
            <param name="alternate" value="expan[1]"/>
        </model>
                    <model predicate="abbr and expan" behaviour="alternate" cssClass="toggle">
            <param name="default" value="abbr[1]"/>
            <param name="alternate" value="expan[1]"/>
        </model>
                    <model predicate="$parameters?mode='dipl' and orig and reg" behaviour="alternate" cssClass="toggle">
            <param name="default" value="orig[1]"/>
            <param name="alternate" value="reg[1]"/>
        </model>
                    <model predicate="orig and reg" behaviour="alternate" cssClass="toggle">
            <param name="default" value="reg[1]"/>
            <param name="alternate" value="orig[1]"/>
        </model>
                </elementSpec>
                <elementSpec ident="div" mode="change">
                    <model predicate="$parameters?panel=&#34;apparatus&#34;" behaviour="apparatus-from-pb" cssClass="apparatus">
            <param name="content" value="./w"/>
            <param name="composition" value="&#34;MekhY&#34;"/>
            <param name="id" value="substring-after(@xml:id, 'pb.')"/>
            <param name="type" value="$parameters?variant"/>
            <param name="display" value="$parameters?display"/>
        </model>
                    <model predicate="$parameters?panel=&#34;apparatus-1&#34;" behaviour="apparatus-pb" cssClass="apparatus">
            <param name="content" value="./w"/>
            <param name="composition" value="&#34;MekhY&#34;"/>
        </model>
                    <model predicate="@type='title_page'" behaviour="block">
            <outputRendition xml:space="preserve">
            border: 1px solid black; padding: 5px;
            </outputRendition>
        </model>
                    <modelSequence>
            <model behaviour="inline" cssClass="versification">
                <param name="content" value="let $parts := tokenize(@xml:id, '\.') let $composition := $parts[1] let $witness := $parts[2]   let $div := substring-after(@xml:id, $composition||'.'||$witness ) let $target := 'ref.' || $composition || $div let $ref := collection('/db/apps/erabbinica-data/data/sources/ref')/id($target)  return ($target, '--', $ref/head[not(@type)])"/>
                <outputRendition xml:space="preserve">
                color: red;
font-variant-caps: small-caps;
                </outputRendition>
            </model>
            <model behaviour="block">
                <pb:set-param name="iiif" value="let $facs := (($parameters?root/ancestor::TEI)//pb[@facs])[1] let $prefix := substring-before($facs/@facs, ':') let $iiif := doc('/db/apps/erabbinica-data/data/sources/taxonomy/taxonomy.xml')/id($prefix)   return $iiif//*:ptr/@target"/>
                <pb:set-param name="iiif-prefix" value="let $facs := (($parameters?root/ancestor::TEI)//pb[@facs])[1] return substring-before($facs/@facs, ':')"/>
                <outputRendition xml:space="preserve">
                direction: rtl;
                </outputRendition>
            </model>
        </modelSequence>
                </elementSpec>

                <elementSpec ident="add" mode="change">
                    <model behaviour="alternate">
            <param name="default" value="."/>
            <param name="alternate" value="@place"/>
            <outputRendition xml:space="preserve">
            color: green; text-decoration: underline;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="note" mode="change">
                    <model predicate="not(@place) and not(@type)" behaviour="alternate">
            <param name="default" value="'*'"/>
            <param name="alternate" value="."/>
        </model>
                    <model predicate="@place" behaviour="note">
            <param name="place" value="@place"/>
            <param name="label" value="@n"/>
        </model>
                    <model predicate="parent::div and not(@place)" behaviour="block">
            <outputRendition xml:space="preserve">
                            margin-left: 10px;margin-right: 10px;
                      font-size:smaller;
            
            </outputRendition>
        </model>
                    <model predicate="not(@place)" behaviour="inline">
            <outputRendition xml:space="preserve" scope="before">
            content:" [";
            </outputRendition>
            <outputRendition xml:space="preserve" scope="after">
            content:"] ";
            </outputRendition>
            <outputRendition xml:space="preserve">
            font-size:small;
            </outputRendition>
        </model>
                </elementSpec>

                <moduleRef key="tei"/>
                <moduleRef key="header"/>
                <moduleRef key="tagdocs"/>
                <moduleRef key="core"/>
                <moduleRef key="gaiji"/>
                <moduleRef key="namesdates"/>
                <moduleRef key="msdescription"/>
                <moduleRef key="corpus"/>
                <moduleRef key="transcr"/>
                <moduleRef key="analysis"/>
                <moduleRef key="linking"/>
                <moduleRef key="drama"/>
                <moduleRef key="textstructure"/>
                <moduleRef key="figures"/>
                <moduleRef key="verse"/>
                <elementSpec ident="w" mode="change">
                    <model behaviour="inline">
            <param name="default" value="."/>
            <param name="facs" value="let $pattern := '^'||$parameters?iiif-prefix || ':' || '([^/]+).*$'   let $vat := if ($parameters?iiif-prefix = 'vatican') then 'MSS_Vat.ebr.299/' else '' return  $parameters?iiif || $vat || replace(@facs, $pattern, '$1')"/>
            <param name="coords" value="let $pattern := '^'||$parameters?iiif-prefix || ':' || '[^/]+/(.*)$'   return  ('[', replace(@facs, $pattern, '$1'), ']')"/>
            <param name="ana" value="@ana"/>
            <param name="id" value="@xml:id"/>
            <param name="img" value="let $pattern := '^'||$parameters?iiif-prefix || ':' || '([^/]+).*$'    let $vat := if ($parameters?iiif-prefix = 'vatican') then 'MSS_Vat.ebr.299/' else '' let $f :=  $parameters?iiif || $vat || replace(@facs, $pattern, '$1')  let $cpattern := '^'||$parameters?iiif-prefix || ':' || '[^/]+/(.*)$'    let $coords :=  replace(@facs, $cpattern, '$1')  return $f || '/' || $coords || '/full/0/default.jpg'"/>
            <pb:template xmlns="" xml:space="preserve">            <span>
              
              <pb-facs-link emit="transcription" facs="[[facs]]" coordinates="[[coords]]">
                [[default]]</pb-facs-link>
               
  			</span>
            </pb:template>
        </model>
                </elementSpec>
            <elementSpec ident="app" mode="add">
                    <model behaviour="block">
            <outputRendition xml:space="preserve"> 
            direction: rtl;
display: inline-grid;
      
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="lem" mode="add">
                    <model behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><cite style="font-style: normal;">[[content]]</cite></pb:template>
            <outputRendition xml:space="preserve">
            padding-left: 0.5em;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="m" mode="add">
                    <model behaviour="block">
            <param name="function" value="@function"/>
            <param name="analysis" value="@ana"/>
            <pb:template xmlns="" xml:space="preserve"><span>[[content]]: </span><span>(function) [[function]]; </span><span>(analysis)  [[analysis]].</span></pb:template>
        </model>
                </elementSpec>
                <elementSpec ident="rdg" mode="add">
                    <model behaviour="inline">
            <pb:template xmlns="" xml:space="preserve"><cite style="font-style: normal;">[[content]]</cite></pb:template>
            <outputRendition xml:space="preserve">
            font-size: smaller;
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="rdgGrp" mode="add">
                    <model behaviour="pass-through">
            <outputRendition xml:space="preserve">
            
            </outputRendition>
        </model>
                </elementSpec>
                <elementSpec ident="ref" mode="change">
                    <model predicate="$parameters?header=&#34;short&#34; and parent::title" behaviour="inline"/>
                    <model predicate="$parameters?header=&#34;breadcrumbs&#34;" behaviour="pass-through">
            <param name="uri" value="@target"/>
            <param name="target" value="'_blank'"/>
            <param name="content" value="."/>
            <pb:template xmlns="" xml:space="preserve"><a href="[[uri]]" target="_blank">[[content]] <iron-icon icon="icons:launch"/></a></pb:template>
        </model>
                    <model predicate="not(not(@target))" behaviour="link">
            <param name="uri" value="@target"/>
            <param name="target" value="'_blank'"/>
        </model>
                    <model predicate="not(node())" behaviour="link">
            <param name="content" value="@target"/>
            <param name="uri" value="@target"/>
        </model>
                    <model output="web" behaviour="alternate">
            <desc>@wit</desc>
            <param name="default" value="@wit"/>
            <param name="alternate" value="&#34;unknown&#34;"/>
        </model>
                </elementSpec>
                <elementSpec ident="wit" mode="add">
                    <model behaviour="alternate">
            <param name="alternate" value="let $info := doc(concat(&#34;/db/apps/erabbinica-data/data/processed/witnesses/&#34;, text(), &#34;.xml&#34;))/TEI/teiHeader/fileDesc/sourceDesc/msDesc/msIdentifier return  concat($info/repository, &#34; &#34;, $info/idno)"/>
            <param name="default" value="."/>
            <outputRendition xml:space="preserve">
 
            padding-left: 0.2em;
padding-right: 0.2em;
font-family: monospace;
font-size: x-small;
   
            </outputRendition>
        </model>
                </elementSpec>
            </schemaSpec>
        </body>
    </text>
</TEI>